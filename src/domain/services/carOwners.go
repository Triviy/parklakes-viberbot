package services

import (
	"errors"
	"fmt"
	"strings"

	"github.com/triviy/parklakes-viberbot/domain/interfaces"
	"github.com/triviy/parklakes-viberbot/domain/models"
	"go.mongodb.org/mongo-driver/mongo"
)

// GetUsersResponseByCarNumber searches for car owner in DB and returns valid user response
func GetUsersResponseByCarNumber(repo interfaces.GenericRepo, carNumber string) (text string, err error) {
	var co models.CarOwner
	if err := repo.FindOne(carNumber, &co); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return "–í–∏–±–∞—á—Ç–µ, –º–µ–Ω—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–≤—Ç—ñ–≤–∫–∏ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º üò•", nil
		}
		return "", err
	}
	var sb strings.Builder
	sb.WriteString("–Ø –∑–Ω–∞–π—à–æ–≤ üòÑ")
	if co.Owner != "" {
		sb.WriteString(fmt.Sprintf("\n–í–ª–∞—Å–Ω–∏–∫ –∞–≤—Ç—ñ–≤–∫–∏ %s", co.Owner))
	}
	sb.WriteString(fmt.Sprintf("\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: %s", co.Phones[0]))
	if len(co.Phones) > 1 {
		sb.WriteString(fmt.Sprintf("\n–î–æ–¥–∞—Ç–∫–æ–≤—ã–π: %s", co.Phones[1]))
	}
	return sb.String(), nil
}
